// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package waveout

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modwinmm = windows.NewLazySystemDLL("winmm.dll")

	procwaveOutOpen  = modwinmm.NewProc("waveOutOpen")
	procwaveOutClose = modwinmm.NewProc("waveOutClose")
)

func Open(handle *syscall.Handle, deviceID uint32, waveFormat *WaveFormatEx, callback uint32, inst uint32, flag uint32) (result MMRESULT) {
	r0, _, _ := syscall.Syscall6(procwaveOutOpen.Addr(), 6, uintptr(unsafe.Pointer(handle)), uintptr(deviceID), uintptr(unsafe.Pointer(waveFormat)), uintptr(callback), uintptr(inst), uintptr(flag))
	result = MMRESULT(r0)
	return
}

func Close(handle syscall.Handle) (result MMRESULT) {
	r0, _, _ := syscall.Syscall(procwaveOutClose.Addr(), 1, uintptr(handle), 0, 0)
	result = MMRESULT(r0)
	return
}
